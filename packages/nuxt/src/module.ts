import type { NimiqAuthOptions } from '@nimiq-auth/core/types'
import type { PublicRuntimeConfig, RuntimeConfig } from '@nuxt/schema'
import { addImports, addServerHandler, addTypeTemplate, createResolver, defineNuxtModule, installModule } from '@nuxt/kit'
import { defu } from 'defu'

declare module '#auth-utils' {
  interface User {
    address: string
    publicKey: string
  }

  interface UserSession {
    challenge: string
  }
}

declare module '@nuxt/schema' {
  interface RuntimeConfig extends Pick<NimiqAuthOptions, 'nimiqAuthJwtDuration'> {}
  interface PublicRuntimeConfig extends Pick<NimiqAuthOptions, 'appName' | 'nimiqHubOptions'> {}
}

export type NimiqAuthModuleOptions = Pick<RuntimeConfig, 'nimiqAuthJwtDuration'> & Pick<PublicRuntimeConfig, 'appName' | 'nimiqHubOptions'>

export default defineNuxtModule<NimiqAuthModuleOptions>({
  meta: {
    name: 'nimiq-auth',
    configKey: 'nimiqAuth',
  },
  defaults: {
    appName: 'Nimiq Auth',
    nimiqHubOptions: {},
    nimiqAuthJwtDuration: 300,
  },
  async setup(options, nuxt) {
    const resolver = createResolver(import.meta.url)

    await installModule('nuxt-auth-utils')

    // Register server endpoints that use our @nimiq-auth/server functions.
    addServerHandler({
      route: '/api/_auth/nimiq/jwt',
      handler: resolver.resolve('./runtime/server/api/jwt.get.ts'),
      method: 'get',
    })
    addServerHandler({
      route: '/api/_auth/nimiq/jwt',
      handler: resolver.resolve('./runtime/server/api/jwt.post.ts'),
      method: 'post',
    })

    // Merge runtime config defaults.
    const runtimeConfig = nuxt.options.runtimeConfig
    runtimeConfig.public.appName ||= options.appName
    runtimeConfig.public.nimiqHubOptions = defu(runtimeConfig.public.nimiqHubOptions, options.nimiqHubOptions)
    runtimeConfig.nimiqAuthJwtDuration ||= options.nimiqAuthJwtDuration

    // Register a composable that uses our @nimiq-auth/client helper.
    addImports([
      { name: 'useNimiqAuth', from: resolver.resolve('./runtime/app/composables/nimiq-auth.ts') },
      { name: 'NimiqAuthStatus', from: resolver.resolve('./runtime/app/composables/nimiq-auth.ts') },
    ])

    addTypeTemplate({
      filename: 'types/nimiq-auth.d.ts',
      getContents: () => `// Generated by @nimiq-auth/nuxt
declare module 'nuxt-auth-utils' {
  interface User {
    address: string
    publicKey: string
  }

  interface UserSession {
    challenge: string
  }
}
export {}`,
    })
  },
})

// TODO: Add middleware docuemntation like nuxt-auth-utils
// TODO: Add a frontend button
