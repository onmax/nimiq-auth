import type { PublicRuntimeConfig } from '@nuxt/schema'
import { addImports, addServerHandler, addTypeTemplate, createResolver, defineNuxtModule, installModule } from '@nuxt/kit'
import { defu } from 'defu'

export interface NimiqAuthModuleOptions {
  appName?: PublicRuntimeConfig['appName']
  nimiqHubOptions?: PublicRuntimeConfig['nimiqHubOptions']
}

export default defineNuxtModule<NimiqAuthModuleOptions>({
  meta: {
    name: 'nimiq-auth',
    configKey: 'nimiqAuth',
  },
  defaults: {
    appName: 'Login with Nimiq',
    nimiqHubOptions: {},
  },
  async setup(options, nuxt) {
    const resolver = createResolver(import.meta.url)

    await installModule('nuxt-auth-utils')

    // addPlugin({ src: resolver.resolve('./runtime/server-plugin'), mode: 'server' })

    addServerHandler({
      route: '/api/_auth/nimiq/challenge',
      handler: resolver.resolve('./runtime/server/api/challenge.get.ts'),
      method: 'get',
    })

    addServerHandler({
      route: '/api/_auth/nimiq/challenge/verify',
      handler: resolver.resolve('./runtime/server/api/challenge.post.ts'),
      method: 'post',
    })

    const runtimeConfig = nuxt.options.runtimeConfig
    runtimeConfig.public.appName = runtimeConfig.public.appName || options.appName
    runtimeConfig.public.nimiqHubOptions = defu(runtimeConfig.public.nimiqHubOptions, options.nimiqHubOptions)

    addImports([
      { name: 'useNimiqAuth', from: resolver.resolve('./runtime/app/composables/nimiq-auth.ts') },
    ])

    addTypeTemplate({
      filename: 'types/nimiq-auth.d.ts',
      getContents: () => `// Generated by @nimiq-auth/nuxt
declare module 'nuxt-auth-utils' {
  interface User {
    address: string
    publicKey: string
  }

  interface UserSession {
    challenge: string
  }
}
export {}`,
    })
  },
})

// TODO Add middleware
// TODO Add lib for frontend
